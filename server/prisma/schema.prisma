generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  passwordHash      String
  firstName         String?
  lastName          String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  emailVerified     Boolean        @default(false)
  verificationToken String?
  skinProfile       SkinProfile?
  routines          UserRoutine[]
  feedback          UserFeedback[]
  responses         UserResponse[]
  productFeedback   ProductFeedback[]
  routineFeedback   RoutineFeedback[]
}

model SkinProfile {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  user          User     @relation(fields: [userId], references: [id])
  skinType      String?
  concerns      String[]
  allergies     String[]
  currentRoutine String?
  lifestyleFactors Json?
  recommendations Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id              Int            @id @default(autoincrement())
  name            String
  brand           String
  description     String
  imageUrl        String?
  categoryId      Int?
  category        Category?       @relation(fields: [categoryId], references: [id])
  isNatural       Boolean?
  isGentle        Boolean?
  price           Float?
  size            Float?
  unit            String?
  skinType        String[]
  targetConcerns  String[]
  keyIngredients  String[]
  ingredients     String[]
  isDay           Boolean?
  isNight         Boolean?
  createdAt       DateTime       @default(now())
  routineSteps    RoutineStep[]
  defaultSteps    RoutineStep[]  @relation("DefaultProduct")
  feedback        UserFeedback[]
  productFeedback ProductFeedback[]
  routineFeedback RoutineFeedback[]
  stepAlternatives StepAlternative[]
  updatedAt       DateTime       @updatedAt
}

model RoutineStep {
  id            Int         @id @default(autoincrement())
  routineId     Int
  routine       UserRoutine @relation(fields: [routineId], references: [id])
  productId     Int
  product       Product     @relation(fields: [productId], references: [id])
  defaultProductId Int?
  defaultProduct Product?   @relation("DefaultProduct", fields: [defaultProductId], references: [id])
  order         Int
  time          String?
  categoryName  String?
  notes         String?
  alternatives  StepAlternative[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model StepAlternative {
  id              Int         @id @default(autoincrement())
  stepId          Int
  step            RoutineStep @relation(fields: [stepId], references: [id])
  productId       Int
  product         Product     @relation(fields: [productId], references: [id])
  name            String
  brand           String
  description     String
  price           Float
  size            Float
  unit            String
  keyIngredients  String[]
  isNatural       Boolean
  isGentle        Boolean
  score           Float?
  scoreBreakdown  Json?
  userRating      Float?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  products    Product[]
}

model UserRoutine {
  id          Int             @id @default(autoincrement())
  userId      Int
  user        User            @relation(fields: [userId], references: [id])
  name        String
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  steps       RoutineStep[]
  routineFeedback RoutineFeedback[]
}

model UserFeedback {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int      @db.SmallInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Question {
  id          Int            @id @default(autoincrement())
  text        String
  type        QuestionType
  options     String[]
  category    QuestionCategory
  order       Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  responses   UserResponse[]
}

model UserResponse {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  questionId  Int
  question    Question  @relation(fields: [questionId], references: [id])
  answer      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, questionId])
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  RATING
  NUMERICAL
  YES_NO
}

enum QuestionCategory {
  SKIN_TYPE
  CONCERNS
  LIFESTYLE
  PREFERENCES
  FEEDBACK
}

model ProductFeedback {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  usage       String   // As recommended, Less often, Stopped
  discomfort  Boolean
  discomfortImproving Boolean?
  positiveChanges Boolean?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, productId])
}

model RoutineFeedback {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  routineId   Int
  routine     UserRoutine @relation(fields: [routineId], references: [id])
  satisfaction String  // Very satisfied, Satisfied, Neutral, Unsatisfied, Very unsatisfied
  skinChanges  Boolean
  easeOfUse    String  // Yes, Somewhat, No
  unnecessaryProductId Int?
  unnecessaryProduct   Product? @relation(fields: [unnecessaryProductId], references: [id])
  primaryConcern      String
  routinePreference   String  // Keep same, Make adjustments, Start new
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, routineId])
}
